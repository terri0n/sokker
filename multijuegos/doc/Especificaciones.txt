CLIENTE
-------
conexion.js.jsp
	WebSocket: envía y recibe mnesajes al servidor

sala.js.jsp
	Gestiona la creación de partidas
	
juego.js.jsp
	Gestiona aspectos comunes de los juegos: turnos, tiempos, puntos, movimientos, chat, etc
	Ojo con los away, que para no resetear el tiempo de inactividad llama directamente a conexion.enviar_sin_timeout

chessgoal.js.jsp
	Lógica específica del ChessGoal

jugador.js.jsp
	Datos del jugador más lógica asociada

login.js.jsp
	Funciones de login y registro

SERVIDOR
--------
SessionListener.java
	Gestiona las sesiones de Tomcat. Esta será común para todos los juegos mientras que la comunicación específica de un juego se realiza mediante los WebSockets
	Al iniciar la sesión, se asigna un nombre de invitado
	Al hacer login se sustituye el nombre por el del usuario

EndpointBase.java
	Clase común para gestionar los WebSockets

Endpoint.java
	De momento contiene la lógica específica de ChessGoal

Sample.java
	Contiene consultas de ejemplo para crear la BD y los datos iniciales
